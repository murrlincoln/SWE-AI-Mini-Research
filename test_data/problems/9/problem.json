{
    "description": "This problem tests the ability to work with graphs. The task is to implement a function that performs a depth-first search on a graph represented as an adjacency list.",
    "function_prototype": {
        "function_name": "depth_first_search",
        "parameters": [
            {
                "name": "graph",
                "type": "Dict[int, List[int]]"
            },
            {
                "name": "start",
                "type": "int"
            }
        ],
        "return_values": [
            {
                "type": "List[int]"
            }
        ]
    },
    "problem_id": "depth_first_search",
    "prompts": [
        {
            "content": "Implement a function that performs a depth-first search on a graph represented as an adjacency list.",
            "type": "prompt_only"
        },
        {
            "content": "Implement a function that performs a depth-first search on a graph represented as an adjacency list.\n\nTest Cases:\n- Input: graph = {1: [2, 3], 2: [4], 3: [], 4: []}, start = 1\n  Expected Output: [1, 2, 4, 3]\n- Input: graph = {1: [2, 3], 2: [1], 3: [1]}, start = 1\n  Expected Output: [1, 2, 3]",
            "type": "prompt_with_tests"
        },
        {
            "content": "Write a Python function to pass the following tests: Test Cases:\n- Input: graph = {1: [2, 3], 2: [4], 3: [], 4: []}, start = 1\n  Expected Output: [1, 2, 4, 3]\n- Input: graph = {1: [2, 3], 2: [1], 3: [1]}, start = 1\n  Expected Output: [1, 2, 3]",
            "type": "prompt_tests_only"
        },
        {
            "content": "Write a Python function to pass the following tests: def test_generic_9():\n  assert function({1: [2, 3], 2: [1], 3: [1]}, 1) == [1, 2, 3]\n  assert function({1: [2, 3], 2: [4], 3: [], 4: []}, 1) == [1, 2, 4, 3]",
            "type": "prompt_generic_tests"
        }
    ],
    "test_cases": [
        {
            "expected_output": "[1, 2, 4, 3]",
            "parameters": {
                "graph": "graph = {1: [2",
                "start": "3]"
            }
        },
        {
            "expected_output": "[1, 2, 3]",
            "parameters": {
                "graph": "graph = {1: [2",
                "start": "3]"
            }
        }
    ]
}